# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License.
source test_utils.tcl

tcltest::customMatch dict {apply {{expected actual} {
  if {[dict size $expected] != [dict size $actual]} { return 0 }
  dict for {key value} $actual {
    if {![dict exists $expected $key]} {
      return 0
    }
    if {$value ne [dict get $expected $key]} {
      return 0
    }
  }

  return 1
}}}

set bucket MY_BUCKET

test key_value-1.1 "Get existing key" -setup {
    startNats NATS_JS -js ;# start nats with Jet Stream    
    
    execNatsCmd kv add $bucket
    execNatsCmd kv put $bucket key1 value1
    set conn [nats::connection new]
    
    #debugLogging $conn
    $conn configure -servers nats://localhost:4222
    $conn connect
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    set value [$kv get $bucket key1]

    dict filter $value key value key operation bucket revision
} -match dict -result [dict create value value1 operation PUT key key1 bucket $bucket revision 1] -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.2 "Throw KeyNotFound for not existing key" -setup {
    execNatsCmd kv add $bucket
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    catch {
        $kv get $bucket key1
    } err errOpts
    puts $errOpts
    puts $err
    assert {[dict get $errOpts -errorcode] eq {NATS KeyNotFound}}
    set err
} -result {Key key1 not found} -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.3 "Throw KeyNotFound for deleted key" -setup {
    execNatsCmd kv add $bucket
    execNatsCmd kv put $bucket key1 value1
    execNatsCmd kv del $bucket key1 -f
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    catch {
        $kv get $bucket key1
    } err errOpts
    assert {[dict get $errOpts -errorcode] eq {NATS KeyNotFound}}
    set err
} -result {Key key1 not found} -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.4 "Put key" -setup {
    execNatsCmd kv add $bucket
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    $kv put $bucket key1 value1
} -result {1} -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.5 "Delete key" -setup {
    execNatsCmd kv add $bucket
    execNatsCmd kv put $bucket key1 value1
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    $kv del $bucket key1

    catch { exec nats kv get $bucket key1 --raw } err errOpts
    set err
} -result {nats: error: nats: key not found} -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.6 "Purge key" -setup {
    execNatsCmd kv add $bucket --history 4
    execNatsCmd kv put $bucket key1 value1
    execNatsCmd kv put $bucket key1 value2
    execNatsCmd kv put $bucket key1 value3
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    $kv purge $bucket key1

    catch { exec nats kv get $bucket key1 --raw } err errOpts
    set err
} -result {nats: error: nats: key not found} -cleanup {
    execNatsCmd kv del $bucket -f
}

test key_value-1.7 "Delete bucket" -setup {
    execNatsCmd kv add $bucket
} -body {
    set jet_stream [$conn jet_stream]
    set kv [$jet_stream key_value]
    $kv del $bucket 

    catch { exec nats kv info $bucket } err errOpts
    set err
} -result {nats: error: nats: bucket not found}

# test key_value-1.8 "Add bucket" -body {
#     set jet_stream [$conn jet_stream]
#     set kv [$jet_stream key_value]
#     $kv add $bucket

#     execNatsCmd kv info $bucket
# } -result {} -cleanup {
#     execNatsCmd kv del $bucket -f
# }

# This should be the last test case in the file!
test key_value-99 "Finalize the tests" -body {
    # because of nats_cli constraint, this cleanup can't be done in the global scope
    $conn destroy
    stopNats NATS_JS
}
tcltest::cleanupTests